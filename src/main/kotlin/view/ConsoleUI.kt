package view

import service.BankService
import service.TransactionService
import service.UserService
import kotlin.system.exitProcess

class ConsoleUI {

    fun start() {
        while (true) {
            mainMenu()
        }
    }

    private fun printHeader(title: String) {
        println("\n${AnsiColor.BRIGHT_BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${AnsiColor.RESET}")
        println("${AnsiColor.BRIGHT_BLUE}‚ïë${AnsiColor.RESET} ${AnsiColor.BOLD}${AnsiColor.CYAN}$title${AnsiColor.RESET}")
        println("${AnsiColor.BRIGHT_BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${AnsiColor.RESET}")
    }

    private fun mainMenu() {
        printHeader("WELCOME TO CLI BANK SYSTEM üè¶")
        println(
            """
            ${AnsiColor.BRIGHT_CYAN}1Ô∏è‚É£  Login
            2Ô∏è‚É£  Register
            3Ô∏è‚É£  Exit${AnsiColor.RESET}
        """.trimIndent()
        )
        print("${AnsiColor.PURPLE}üëâ Choose an option: ${AnsiColor.RESET}")

        try {
            when (readln().toInt()) {
                1 -> loginUser()
                2 -> registerUser()
                3 -> {
                    println("${AnsiColor.GREEN}üëã Thank you for using CLI Bank. Goodbye!${AnsiColor.RESET}")
                    exitProcess(0)
                }
                else -> println("${AnsiColor.RED}‚ùå Invalid option. Please try again.${AnsiColor.RESET}")
            }
        } catch (e: NumberFormatException) {
            println("${AnsiColor.RED}‚ùå Invalid input. Please enter a number.${AnsiColor.RESET}")
        }
    }

    private fun loginUser() {
        printHeader("üîê Login")
        print("üë§ Username: ")
        val username = readln()
        print("üîë Password: ")
        val password = readln()

        if (username.isEmpty() || password.isEmpty()) {
            println("${AnsiColor.YELLOW}‚ö†Ô∏è Username and password cannot be empty.${AnsiColor.RESET}")
            return
        }

        val loginResult = UserService.login(username, password)
        loginResult.onSuccess {
            println("${AnsiColor.GREEN}‚úÖ Welcome back, ${it.name}!${AnsiColor.RESET}")
            bankMenu()
        }.onFailure {
            println("${AnsiColor.RED}‚ùå ${it.message}${AnsiColor.RESET}")
        }
    }

    private fun registerUser() {
        printHeader("üìù Register")
        print("üë§ Choose a Username: ")
        val username = readln()
        print("üîë Choose a Password: ")
        val password = readln()

        if (username.isEmpty() || password.isEmpty()) {
            println("${AnsiColor.YELLOW}‚ö†Ô∏è Username and password cannot be empty.${AnsiColor.RESET}")
            return
        }

        val registerResult = UserService.register(username, password)
        registerResult.onSuccess {
            println("${AnsiColor.GREEN}üéâ Welcome ${it.name}! Your account has been created.${AnsiColor.RESET}")
            bankMenu()
        }.onFailure {
            println("${AnsiColor.RED}‚ùå ${it.message}${AnsiColor.RESET}")
        }
    }

    private fun transactionMenu() {
        val currentUser = UserService.getCurrentUser()
        if (currentUser == null) {
            println("${AnsiColor.YELLOW}‚ö†Ô∏è You must be logged in to access transactions.${AnsiColor.RESET}")
            return
        }

        while (true) {
            printHeader("üí≥ Transaction Menu")
            println(
                """
                ${AnsiColor.BRIGHT_CYAN}1Ô∏è‚É£  Withdraw
                2Ô∏è‚É£  Deposit
                3Ô∏è‚É£  Transfer
                4Ô∏è‚É£  Back${AnsiColor.RESET}
            """.trimIndent()
            )
            print("${AnsiColor.PURPLE}üëâ Select an option: ${AnsiColor.RESET}")

            try {
                when (readln().toInt()) {
                    1 -> {
                        print("üè¶ Account ID: ")
                        val accId = readln().toInt()
                        print("üí∏ Amount to withdraw: ")
                        val amount = readln().toDouble()
                        TransactionService.withdraw(accId, amount)
                    }
                    2 -> {
                        print("üè¶ Account ID: ")
                        val accId = readln().toInt()
                        print("üí∞ Amount to deposit: ")
                        val amount = readln().toDouble()
                        TransactionService.deposit(accId, amount)
                    }
                    3 -> {
                        print("üì§ From Account ID: ")
                        val fromId = readln().toInt()
                        print("üì• To Account ID: ")
                        val toId = readln().toInt()
                        print("üí± Amount to transfer: ")
                        val amount = readln().toDouble()
                        TransactionService.transfer(fromId, toId, amount)
                    }
                    4 -> return
                    else -> println("${AnsiColor.RED}‚ùå Invalid option. Please try again.${AnsiColor.RESET}")
                }
            } catch (e: NumberFormatException) {
                println("${AnsiColor.RED}‚ùå Invalid input. Please enter a number.${AnsiColor.RESET}")
            }
        }
    }

    private fun bankMenu() {
        val currentUser = UserService.getCurrentUser()
        if (currentUser == null) {
            println("${AnsiColor.YELLOW}‚ö†Ô∏è You must be logged in to access the bank menu.${AnsiColor.RESET}")
            return
        }

        while (true) {
            printHeader("üèõÔ∏è Bank Menu for ${currentUser.name}")
            println(
                """
                ${AnsiColor.BRIGHT_CYAN}1Ô∏è‚É£  Create Bank Account
                2Ô∏è‚É£  View My Accounts
                3Ô∏è‚É£  Get Account by ID
                4Ô∏è‚É£  Transactions
                5Ô∏è‚É£  Logout${AnsiColor.RESET}
            """.trimIndent()
            )
            print("${AnsiColor.PURPLE}üëâ Choose an option: ${AnsiColor.RESET}")

            try {
                when (readln().toInt()) {
                    1 -> {
                        print("üíµ Initial Balance (default 0): ")
                        val balanceInput = readln()
                        val balance = if (balanceInput.isBlank()) 0.0 else balanceInput.toDouble()
                        BankService.createAccount(currentUser.id, balance)
                    }
                    2 -> BankService.getAccountsByUserId(currentUser.id)
                    3 -> {
                        print("üîç Enter Account ID: ")
                        val accId = readln().toInt()
                        BankService.getAccountById(accId)
                    }
                    4 -> transactionMenu()
                    5 -> {
                        UserService.logout()
                        println("${AnsiColor.GREEN}üëã You have been logged out.${AnsiColor.RESET}")
                        return
                    }
                    else -> println("${AnsiColor.RED}‚ùå Invalid option.${AnsiColor.RESET}")
                }
            } catch (e: NumberFormatException) {
                println("${AnsiColor.RED}‚ùå Invalid input. Please enter a number.${AnsiColor.RESET}")
            }
        }
    }
}
